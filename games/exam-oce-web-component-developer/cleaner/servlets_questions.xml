<question><alternatives><alternative><name><![CDATA[ Servlet]]></name><id>a</id></alternative><alternative><name><![CDATA[ HttpServlet]]></name><id>b</id></alternative><alternative><name><![CDATA[ ServletRequest]]></name><id>c</id></alternative><alternative><name><![CDATA[ HttpServletRequest]]></name><id>d</id></alternative><corrects>a,c,d</corrects></alternatives><question_name><![CDATA[ Which of the following are interfaces? (3 correct answers)
        
        
        
        

]]></question_name></question><question><alternatives><alternative><name><![CDATA[ Servlet]]></name><id>a</id></alternative><alternative><name><![CDATA[ HttpServlet]]></name><id>b</id></alternative><alternative><name><![CDATA[ GenericServlet]]></name><id>c</id></alternative><alternative><name><![CDATA[ HttpServletRequest]]></name><id>d</id></alternative><corrects>b,c</corrects></alternatives><question_name><![CDATA[ Which of the following are abstract classes? (2 correct answers)
        
        
        
        

]]></question_name></question><question><alternatives><alternative><name><![CDATA[ HttpServlet extends GenericServlet that implements Servlet.]]></name><id>a</id></alternative><alternative><name><![CDATA[ HttpServlet extends GenericServlet that extends Servlet.]]></name><id>b</id></alternative><alternative><name><![CDATA[ HttpServlet implements GenericServlet that extends Servlet.]]></name><id>c</id></alternative><corrects>a</corrects></alternatives><question_name><![CDATA[ Which of the following statements is true? (1 correct answer)
        
        
        

]]></question_name></question><question><alternatives><alternative><name><![CDATA[ HttpServlet IS-A GenericServlet.]]></name><id>a</id></alternative><alternative><name><![CDATA[ HttpServlet IS-A Servlet.]]></name><id>b</id></alternative><alternative><name><![CDATA[ HttpServlet IS-A ServletRequest.]]></name><id>c</id></alternative><corrects>a,b</corrects></alternatives><question_name><![CDATA[ Which of the following statements are true? (2 correct answers)
        
        
        

]]></question_name></question><question><alternatives><alternative><name><![CDATA[ Calls the void service(HttpServletRequest, HttpServletResponse) method of the servlet.]]></name><id>a</id></alternative><alternative><name><![CDATA[ Creates a pair of request and response objects.]]></name><id>b</id></alternative><alternative><name><![CDATA[ Finds the correct servlet based on the URL.]]></name><id>c</id></alternative><alternative><name><![CDATA[ Creates a new thread or allocates an existing thread to the client’s request.]]></name><id>d</id></alternative><corrects>b,c,d,a</corrects></alternatives><question_name><![CDATA[ Here are some actions taken by the Container when a client request arrives. Place them in the correct order starting from what happens first.
        
        
        
        

]]></question_name></question><question><alternatives><alternative><name><![CDATA[ getServletConfig();]]></name><id>a</id></alternative><alternative><name><![CDATA[ request.getServletConfig();]]></name><id>b</id></alternative><alternative><name><![CDATA[ response.getServletConfig();]]></name><id>c</id></alternative><alternative><name><![CDATA[ getServletContext().getServletConfig();]]></name><id>d</id></alternative><alternative><name><![CDATA[ request.getSession().getServletConfig();]]></name><id>e</id></alternative><corrects>a</corrects></alternatives><question_name><![CDATA[ How can a servlet access it’s associated ServletConfig object? (1 correct answer)
        
        
        
        
        

]]></question_name></question><question><alternatives><alternative><name><![CDATA[ getServletContext();]]></name><id>a</id></alternative><alternative><name><![CDATA[ request.getServletContext();]]></name><id>b</id></alternative><alternative><name><![CDATA[ response.getServletContext();]]></name><id>c</id></alternative><alternative><name><![CDATA[ getServletConfig().getServletContext();]]></name><id>d</id></alternative><alternative><name><![CDATA[ request.getSession().getServletContext();]]></name><id>e</id></alternative><corrects>a,d,e</corrects></alternatives><question_name><![CDATA[ How can a servlet access the application’s ServletContext object? (3 correct answers)
        
        
        
        
        

]]></question_name></question><question><alternatives><alternative><name><![CDATA[ request.getRequestDispatcher().forward(“hello.jsp”);]]></name><id>a</id></alternative><alternative><name><![CDATA[ request.getRequestDispatcher().dispatch(“hello.jsp”);]]></name><id>b</id></alternative><alternative><name><![CDATA[ request.getRequestDispatcher(“hello.jsp”).forward(request, response);]]></name><id>c</id></alternative><alternative><name><![CDATA[ request.getRequestDispatcher(“hello.jsp”).dispatch(request, response);]]></name><id>d</id></alternative><corrects>c</corrects></alternatives><question_name><![CDATA[ How is a request dispatchedto hello.jsp from a doGet() method? (1 correct answer)
        
        
        
        

]]></question_name></question><question><alternatives><alternative><name><![CDATA[ request.redirect(“hello.jsp”);]]></name><id>a</id></alternative><alternative><name><![CDATA[ response.redirect(“hello.jsp”);]]></name><id>b</id></alternative><alternative><name><![CDATA[ request.sendRedirect(“hello.jsp”);]]></name><id>c</id></alternative><alternative><name><![CDATA[ response.sendRedirect(“hello.jsp”);]]></name><id>d</id></alternative><corrects>d</corrects></alternatives><question_name><![CDATA[ How is a request redirectedto hello.jsp from a doGet() method? (1 correct answer)
        
        
        
        

]]></question_name></question><question><alternatives><alternative><name><![CDATA[ true]]></name><id>a</id></alternative><alternative><name><![CDATA[ false]]></name><id>b</id></alternative><corrects>a</corrects></alternatives><question_name><![CDATA[ Dispatching a request occurs on the server-side and redirection on the client-side. (1 correct answer)
        
        

]]></question_name></question><question><alternatives><alternative><name><![CDATA[ true]]></name><id>a</id></alternative><alternative><name><![CDATA[ false]]></name><id>b</id></alternative><corrects>a</corrects></alternatives><question_name><![CDATA[ Both context init parameters and servlet init parameters are declared in the web.xml. (1 correct answer)
        
        

]]></question_name></question><question><alternatives><alternative><name><![CDATA[ true]]></name><id>a</id></alternative><alternative><name><![CDATA[ false]]></name><id>b</id></alternative><corrects>b</corrects></alternatives><question_name><![CDATA[ The value of a servlet init parameter can be changed programmatically, but the value of a context init parameter cannot. (1 correct answer)
        
        

]]></question_name></question><question><alternatives><alternative><name><![CDATA[ true]]></name><id>a</id></alternative><alternative><name><![CDATA[ false]]></name><id>b</id></alternative><corrects>b</corrects></alternatives><question_name><![CDATA[ A context init parameter cannot have the same name with a servlet init parameter. (1 correct answer)
        
        

]]></question_name></question><question><alternatives><alternative><name><![CDATA[ true]]></name><id>a</id></alternative><alternative><name><![CDATA[ false]]></name><id>b</id></alternative><corrects>b</corrects></alternatives><question_name><![CDATA[ A servlet init parameter cannot have the same name with the servlet it refers to. (1 correct answer)
        
        

]]></question_name></question><question><alternatives><alternative><name><![CDATA[ In the ServletConfig object of the servlet.]]></name><id>a</id></alternative><alternative><name><![CDATA[ In the ServletContext object of the web application.]]></name><id>b</id></alternative><corrects>a</corrects></alternatives><question_name><![CDATA[ Where is a servlet init parameter stored after the servlet is initialized and available for use? (1 correct answer)
        
        

]]></question_name></question><question><alternatives><alternative><name><![CDATA[ In the ServletConfig object of the servlet.]]></name><id>a</id></alternative><alternative><name><![CDATA[ In the ServletContext object of the web application.]]></name><id>b</id></alternative><corrects>b</corrects></alternatives><question_name><![CDATA[ Where is a context init parameter stored after the servlet is initialized and available for use? (1 correct answer)
        
        

]]></question_name></question><question><alternatives><alternative><name><![CDATA[ Yes.]]></name><id>a</id></alternative><alternative><name><![CDATA[ No, because servlet-name contains a space.]]></name><id>b</id></alternative><alternative><name><![CDATA[ No, because servlet-class has a wrong value.]]></name><id>c</id></alternative><alternative><name><![CDATA[ No, because param-name is a reserved Java keyword.]]></name><id>d</id></alternative><alternative><name><![CDATA[ No, because param-value contains an explanation mark (!).]]></name><id>e</id></alternative><alternative><name><![CDATA[ No, because init-param should be inside a servlet-mapping element.]]></name><id>f</id></alternative><corrects>c</corrects></alternatives><question_name><![CDATA[ Assume the servlet HelloServlet that belongs to package com. The file HelloServlet.class is placed in the directory WEB-INF/classes/com. Is this a correct declaration of an init parameter for this servlet? (1 correct answer)
    
    <servlet>
        <servlet-name>Hello Servlet</servlet-name>
        <servlet-class>classes.com.HelloServlet</servlet-class>
        <init-param>
            <param-name>this</param-name>
            <param-value>Hello!</param-value>
        </init-param>
    </servlet>

        
        
        
        
        
        

]]></question_name></question><question><alternatives><alternative><name><![CDATA[ Compilation fails because there is no init() method defined.]]></name><id>a</id></alternative><alternative><name><![CDATA[ An exception is thrown at runtime because service() has no method to call!]]></name><id>b</id></alternative><alternative><name><![CDATA[ Deployment succeeds but we get a message “GET is not supported by this URL” if we access it.]]></name><id>c</id></alternative><corrects>c</corrects></alternatives><question_name><![CDATA[ What happens when we compile and deploy this servlet? (1 correct answer)
    
    public class Test extends HttpServlet {
     
    }

        
        
        

]]></question_name></question><question><alternatives><alternative><name><![CDATA[ Compilation fails because there is no init() method defined.]]></name><id>a</id></alternative><alternative><name><![CDATA[ An exception is thrown at runtime because the servlet has no modifier.]]></name><id>b</id></alternative><alternative><name><![CDATA[ An exception is thrown at runtime because service() has no method to call!]]></name><id>c</id></alternative><alternative><name><![CDATA[ Deployment succeeds but we get a message “GET is not supported by this URL” if we try to access its URL.]]></name><id>d</id></alternative><corrects>b</corrects></alternatives><question_name><![CDATA[ What happens when we compile and deploy this servlet? (1 correct answer)
    
    class Test extends HttpServlet {
     
    }

        
        
        
        

]]></question_name></question><question><alternatives><alternative><name><![CDATA[ Compilation fails because doGet() is empty.]]></name><id>a</id></alternative><alternative><name><![CDATA[ An exception is thrown at runtime because doGet() is empty.]]></name><id>b</id></alternative><alternative><name><![CDATA[ Deployment succeeds but nothing is displayed to the user’s browser.]]></name><id>c</id></alternative><corrects>c</corrects></alternatives><question_name><![CDATA[ What happens when this servlet is compiled, deployed and called? (1 correct answer)
    
    public class Test extends HttpServlet {
        public void doGet(HttpServletRequest request,
                          HttpServletResponse response)
                          throws ServletException, IOException {
            // TODO
        }
    }

        
        
        

]]></question_name></question><question><alternatives><alternative><name><![CDATA[ Compilation fails because doGet() must be void.]]></name><id>a</id></alternative><alternative><name><![CDATA[ Deployment succeeds but nothing is displayed to the user’s browser.]]></name><id>b</id></alternative><alternative><name><![CDATA[ A NullPointerException is thrown at runtime because null is returned.]]></name><id>c</id></alternative><alternative><name><![CDATA[ A ServletException is thrown at runtime because service() cannot find the proper doGet() method.]]></name><id>d</id></alternative><corrects>a</corrects></alternatives><question_name><![CDATA[ What happens when this servlet is compiled, deployed and called? (1 correct answer)
    
    public class Test extends HttpServlet {
    public String doGet(HttpServletRequest request,
                        HttpServletResponse response)
                        throws ServletException, IOException {
            // TODO
        return null;
    }
    }

        
        
        
        

]]></question_name></question><question><alternatives><alternative><name><![CDATA[ Compilation fails because doGet() is protected.]]></name><id>a</id></alternative><alternative><name><![CDATA[ Compilation fails because doGet() does not declare a ServletException.]]></name><id>b</id></alternative><alternative><name><![CDATA[ Deployment succeeds and clients are served just fine.]]></name><id>c</id></alternative><corrects>c</corrects></alternatives><question_name><![CDATA[ What happens when this servlet is compiled and deployed? (1 correct answer)
    
    public class Test extends HttpServlet {
    protected void doGet(HttpServletRequest request,
                         HttpServletResponse response)
                         throws IOException {
        response.setContentType("text/html; charset=UTF-8");
        PrintWriter out = response.getWriter();
        out.println("<html><body>");
        out.println("<p>Hello!!</p>");
        out.println("</body></html>");
        out.close();
    }
    }

        
        
        

]]></question_name></question><question><alternatives><alternative><name><![CDATA[ An exception is thrown at runtime because the Container cannot modify the request and response objects.]]></name><id>a</id></alternative><alternative><name><![CDATA[ An exception is thrown at runtime when the out object is closed.]]></name><id>b</id></alternative><alternative><name><![CDATA[ Deployment succeeds and clients are served just fine.]]></name><id>c</id></alternative><corrects>c</corrects></alternatives><question_name><![CDATA[ What happens when this servlet is deployed and called? (1 correct answer)
    
    public class Test extends HttpServlet {
    public void doGet(final HttpServletRequest request,
                      final HttpServletResponse response)
                      throws IOException, ServletException {
        response.setContentType("text/html; charset=UTF-8");
        final PrintWriter out = response.getWriter();
        out.println("<html><body>");
        out.println("<p>Hello!!</p>");
        out.println("</body></html>");
        out.close();
    }
    }

        
        
        

]]></question_name></question><question><alternatives><alternative><name><![CDATA[ A ServletException is thrown at runtime because the <html> and <body> tags are missing.]]></name><id>a</id></alternative><alternative><name><![CDATA[ Deployment succeeds and Hello!! is presented on the browser.]]></name><id>b</id></alternative><alternative><name><![CDATA[ The server responds with a HTTP status code 404: “Not Found”.]]></name><id>c</id></alternative><corrects>b</corrects></alternatives><question_name><![CDATA[ What happens when this servlet is deployed and called? (1 correct answer)
    
    public class Test extends HttpServlet {
    public void doGet(HttpServletRequest request,
                      HttpServletResponse response)
                      throws ServletException, IOException {
        response.setContentType("text/html; charset=UTF-8");
        PrintWriter out = response.getWriter();
        // out.println("<html><body>");
        out.println("<p>Hello!!</p>");
        // out.println("</body></html>");
        out.close();
    }
    }

        
        
        

]]></question_name></question><question><alternatives><alternative><name><![CDATA[ Deployment succeeds and Hello!! is presented on the browser.]]></name><id>a</id></alternative><alternative><name><![CDATA[ Compilation fails because the content type should be specified before any output is written.]]></name><id>b</id></alternative><alternative><name><![CDATA[ An exception is thrown at runtime because the response has not an explicitly set content type.]]></name><id>c</id></alternative><corrects>a</corrects></alternatives><question_name><![CDATA[ What happens when this servlet is compiled, deployed and called? (1 correct answer)
    
    public class Test extends HttpServlet {
    public void doGet(HttpServletRequest request,
                      HttpServletResponse response)
                      throws ServletException, IOException {
        // response.setContentType("text/html; charset=UTF-8");
        PrintWriter out = response.getWriter();
        out.println("<html><body>Hello!!</body></html>");
        out.close();
    }
    }

        
        
        

]]></question_name></question><question><alternatives><alternative><name><![CDATA[ An exception is thrown at runtime because out is not closed.]]></name><id>a</id></alternative><alternative><name><![CDATA[ Deployment succeeds and Hello!! is presented on the browser.]]></name><id>b</id></alternative><alternative><name><![CDATA[ Deployment succeeds but no output is presented on the browser.]]></name><id>c</id></alternative><corrects>b</corrects></alternatives><question_name><![CDATA[ What happens when this servlet is compiled, deployed and called? (1 correct answer)
    
    public class Test extends HttpServlet {
    public void doGet(HttpServletRequest request,
                      HttpServletResponse response)
                      throws ServletException, IOException {
        response.setContentType("text/html; charset=UTF-8");
        PrintWriter out = response.getWriter();
        out.println("<html><body>Hello!!</body></html>");
        // out.close();
    }
    }

        
        
        

]]></question_name></question><question><alternatives><alternative><name><![CDATA[ Compilation succeeds.]]></name><id>a</id></alternative><alternative><name><![CDATA[ There is a compilation error at line 4.]]></name><id>b</id></alternative><alternative><name><![CDATA[ There is a compilation error at line 6.]]></name><id>c</id></alternative><alternative><name><![CDATA[ Both lines 4 and 6 contain a compilation error.]]></name><id>d</id></alternative><corrects>d</corrects></alternatives><question_name><![CDATA[ Does this servlet compile successfully? (1 correct answer)
    
    1 public class Test extends HttpServlet {
    2 public void doGet(HttpServletRequest request,
    3                   HttpServletResponse response)
    4                   throws Exception {
    5     response.setContentType("text/html; charset=UTF-8");
    6     response.getWriter().println("Hello!!").close();
    7 }
    8 }

        
        
        
        

]]></question_name></question><question><alternatives><alternative><name><![CDATA[ Compilation succeeds.]]></name><id>a</id></alternative><alternative><name><![CDATA[ Compilation fails because there is no init(ServletConfig) in GenericServlet.]]></name><id>b</id></alternative><alternative><name><![CDATA[ Compilation fails because init(ServletConfig) of GenericServlet throws ServletException.]]></name><id>c</id></alternative><alternative><name><![CDATA[ Compilation fails because init(ServletConfig) of GenericServlet throws IOException and ServletException.]]></name><id>d</id></alternative><corrects>c</corrects></alternatives><question_name><![CDATA[ Does this servlet compile successfully? (1 correct answer)
    
    public class Test extends HttpServlet {
    public void init(ServletConfig config) {
        super.init(config);
    }
    public void doGet(HttpServletRequest request,
                      HttpServletResponse response)
                      throws ServletException, IOException {
        response.setContentType("text/html; charset=UTF-8");
        PrintWriter out = response.getWriter();
        out.println("<html><body>Hello!</body></html>");
        out.close();
    }
    }

        
        
        
        

]]></question_name></question><question><alternatives><alternative><name><![CDATA[ Compilation succeeds.]]></name><id>a</id></alternative><alternative><name><![CDATA[ Compilation fails because index.html is not a jsp.]]></name><id>b</id></alternative><alternative><name><![CDATA[ Compilation fails because doGet should declare ServletException as well.]]></name><id>c</id></alternative><alternative><name><![CDATA[ Compilation fails because the request object’s reference must be request and not req.]]></name><id>d</id></alternative><corrects>c</corrects></alternatives><question_name><![CDATA[ Does this servlet compile successfully? (1 correct answer)
    
    public class Test extends HttpServlet {
    public void doGet(HttpServletRequest req,
                      HttpServletResponse response)
                      throws IOException {
        req.getRequestDispatcher("index.html").
            forward(req, response);
    }
    }

        
        
        
        

]]></question_name></question><question><alternatives><alternative><name><![CDATA[ Compilation succeeds.]]></name><id>a</id></alternative><alternative><name><![CDATA[ Compilation fails because index.html is not a jsp.]]></name><id>b</id></alternative><alternative><name><![CDATA[ Compilation fails because doGet should declare ServletException as well.]]></name><id>c</id></alternative><alternative><name><![CDATA[ Compilation fails because the request object’s reference must be request and not req.]]></name><id>d</id></alternative><corrects>a</corrects></alternatives><question_name><![CDATA[ Does this servlet compile successfully? (1 correct answer)
    
    public class Test extends HttpServlet {
    public void doGet(HttpServletRequest req,
                      HttpServletResponse response)
                      throws IOException {
        response.sendRedirect("index.html");
    }
    }

        
        
        
        

]]></question_name></question><question><alternatives><alternative><name><![CDATA[ request.getRequestDispatcher(“hello.jsp”).forward(request, response);]]></name><id>a</id></alternative><alternative><name><![CDATA[ request.getRequestDispatcher(“hello.jsp”).forward(response, request);]]></name><id>b</id></alternative><alternative><name><![CDATA[ response.getRequestDispatcher(“hello.jsp”).forward(request, response);]]></name><id>c</id></alternative><alternative><name><![CDATA[ response.getRequestDispatcher(“hello.jsp”).forward(response, request);]]></name><id>d</id></alternative><alternative><name><![CDATA[ None of the above.]]></name><id>e</id></alternative><corrects>e</corrects></alternatives><question_name><![CDATA[ Which of the following statements shoud be inserted for a successful compilation? (1 correct answer)
    
    public class Test extends HttpServlet {
        protected void doGet(HttpServletRequest request,
        HttpServletResponse response) {
            // insert statement
        }
    }

        
        
        
        
        

]]></question_name></question><question><alternatives><alternative><name><![CDATA[ An IllegalStateException is thrown at runtime because response.getWriter() is called more than once.]]></name><id>a</id></alternative><alternative><name><![CDATA[ An IllegalStateException is thrown at runtime at line 5 because the request is dispatched after writing data.]]></name><id>b</id></alternative><alternative><name><![CDATA[ An IllegalStateException is thrown at runtime at line 6 because data is written after the request has been dispatched.]]></name><id>c</id></alternative><alternative><name><![CDATA[ An IllegalStateException is thrown at runtime at line 7 because the writer is closed after the request has been dispatched.]]></name><id>d</id></alternative><alternative><name><![CDATA[ The browser displays the content of hello.jsp without any exception at runtime.]]></name><id>e</id></alternative><alternative><name><![CDATA[ The browser displays aa without any exception at runtime.]]></name><id>f</id></alternative><alternative><name><![CDATA[ The browser displays a without any exception at runtime.]]></name><id>g</id></alternative><corrects>e</corrects></alternatives><question_name><![CDATA[ What happens when the servlet with the following method is deployed and called? (1 correct answer)
    
    1 public void doGet(HttpServletRequest request,
    2                   HttpServletResponse response)
    3                   throws ServletException, IOException {
    4     response.getWriter().print('a');
    5     request.getRequestDispatcher("hello.jsp").forward(request, response);
    6     response.getWriter().print('a');
    7     response.getWriter().close();
    8 }

        
        
        
        
        
        
        

]]></question_name></question><question><alternatives><alternative><name><![CDATA[ An exception is thrown at runtime because the provided URL does not start with “/”.]]></name><id>a</id></alternative><alternative><name><![CDATA[ Compilation fails because the provided URL does not start with “/”.]]></name><id>b</id></alternative><alternative><name><![CDATA[ The browser displays the content of hello.jsp.]]></name><id>c</id></alternative><alternative><name><![CDATA[ The browser displays an empty page.]]></name><id>d</id></alternative><corrects>a</corrects></alternatives><question_name><![CDATA[ What happens when the servlet with the following method is deployed and called? (1 correct answer)
    
    public void doGet(HttpServletRequest request,
                      HttpServletResponse response)
                      throws ServletException, IOException {
        getServletContext().getRequestDispatcher("hello.jsp")
                           .forward(request, response);
    }

        
        
        
        

]]></question_name></question><question><alternatives><alternative><name><![CDATA[ An exception is thrown at runtime because the provided URL is absolute.]]></name><id>a</id></alternative><alternative><name><![CDATA[ Compilation fails because the provided URL is absolute.]]></name><id>b</id></alternative><alternative><name><![CDATA[ The browser displays the content of hello.jsp.]]></name><id>c</id></alternative><alternative><name><![CDATA[ The browser displays an empty page.]]></name><id>d</id></alternative><corrects>d</corrects></alternatives><question_name><![CDATA[ What happens when the servlet with the following method is deployed and called? (1 correct answer)
    
    public void doGet(HttpServletRequest request,
                      HttpServletResponse response)
                      throws ServletException, IOException {
        getServletContext().getRequestDispatcher("/hello.jsp");
    }

        
        
        
        

]]></question_name></question><question><alternatives><alternative><name><![CDATA[ A NullPointerException occurs at runtime.]]></name><id>a</id></alternative><alternative><name><![CDATA[ The browser displays an empty page.]]></name><id>b</id></alternative><alternative><name><![CDATA[ The browser displays “null”.]]></name><id>c</id></alternative><alternative><name><![CDATA[ The browser displays “ice”.]]></name><id>d</id></alternative><alternative><name><![CDATA[ The browser displays “tea”.]]></name><id>e</id></alternative><alternative><name><![CDATA[ Compilation fails.]]></name><id>f</id></alternative><corrects>c</corrects></alternatives><question_name><![CDATA[ A servlet init parameter with name “ice” and value “tea” is properly declared. What is the result of this code? (1 correct answer)
    
    public void doGet(HttpServletRequest request,
                      HttpServletResponse response)
                      throws ServletException, IOException {
        response.getWriter().println(
            getServletConfig().getInitParameter("tea")
        );
    }

        
        
        
        
        
        

]]></question_name></question><question><alternatives><alternative><name><![CDATA[ A NullPointerException occurs at runtime.]]></name><id>a</id></alternative><alternative><name><![CDATA[ The browser displays an empty page.]]></name><id>b</id></alternative><alternative><name><![CDATA[ The browser displays “null”.]]></name><id>c</id></alternative><alternative><name><![CDATA[ The browser displays “ice”.]]></name><id>d</id></alternative><alternative><name><![CDATA[ The browser displays “tea”.]]></name><id>e</id></alternative><alternative><name><![CDATA[ Compilation fails.]]></name><id>f</id></alternative><corrects>e</corrects></alternatives><question_name><![CDATA[ A servlet init parameter with name “ice” and value “tea” is properly declared. What is the result of this code? (1 correct answer)
    
    public void doGet(HttpServletRequest request,
                      HttpServletResponse response)
                      throws ServletException, IOException {
        response.getWriter().println(getInitParameter("ice"));
    }

        
        
        
        
        
        

]]></question_name></question><question><alternatives><alternative><name><![CDATA[ A NullPointerException occurs at runtime.]]></name><id>a</id></alternative><alternative><name><![CDATA[ The browser displays an empty page.]]></name><id>b</id></alternative><alternative><name><![CDATA[ The browser displays “null”.]]></name><id>c</id></alternative><alternative><name><![CDATA[ The browser displays “ice”.]]></name><id>d</id></alternative><alternative><name><![CDATA[ The browser displays “tea”.]]></name><id>e</id></alternative><alternative><name><![CDATA[ Compilation fails.]]></name><id>f</id></alternative><corrects>c</corrects></alternatives><question_name><![CDATA[ A context init parameter with name “ice” and value “tea” is properly declared. What is the result of this code? (1 correct answer)
    
    public void doGet(HttpServletRequest request,
                      HttpServletResponse response)
                      throws ServletException, IOException {
        response.getWriter().println(
            getServletContext().getInitParameter("tea")
        );
    }

        
        
        
        
        
        

]]></question_name></question><question><alternatives><alternative><name><![CDATA[ A NullPointerException occurs at runtime.]]></name><id>a</id></alternative><alternative><name><![CDATA[ The browser displays an empty page.]]></name><id>b</id></alternative><alternative><name><![CDATA[ The browser displays “null”.]]></name><id>c</id></alternative><alternative><name><![CDATA[ The browser displays “ice”.]]></name><id>d</id></alternative><alternative><name><![CDATA[ The browser displays “tea”.]]></name><id>e</id></alternative><alternative><name><![CDATA[ Compilation fails.]]></name><id>f</id></alternative><corrects>f</corrects></alternatives><question_name><![CDATA[ A context init parameter with name “ice” and value “tea” is properly declared. What is the result of this code? (1 correct answer)
    
    public void doGet(HttpServletRequest request,
                      HttpServletResponse response)
                      throws ServletException, IOException {
        response.getWriter().println(getContextParameter("ice"));
    }

        
        
        
        
        
        

]]></question_name></question><question><alternatives><alternative><name><![CDATA[ true]]></name><id>a</id></alternative><alternative><name><![CDATA[ false]]></name><id>b</id></alternative><corrects>a</corrects></alternatives><question_name><![CDATA[ The Container creates a single instance for every servlet. The client requests are served with various threads. (1 correct answer)
        
        

]]></question_name></question><question><alternatives><alternative><name><![CDATA[ http://localhost:]]></name><id>a</id></alternative><alternative><name><![CDATA[ /test1/processor]]></name><id>b</id></alternative><alternative><name><![CDATA[ /processor]]></name><id>c</id></alternative><alternative><name><![CDATA[ /test1]]></name><id>d</id></alternative><corrects>d</corrects></alternatives><question_name><![CDATA[ Assume that the container is running on port 9999 of localhost, our application is called test1 and that the following servlet is declared with url pattern /processor. What is the output? (1 correct answer)
    
    public class Processor extends HttpServlet {
    public void doGet(HttpServletRequest request,
                      HttpServletResponse response)
                      throws ServletException, IOException {
        response.getWriter().println(request.getContextPath());
    }
    }

        9/test1/processor999
        
        
        

]]></question_name></question><question><alternatives><alternative><name><![CDATA[ http://localhost:]]></name><id>a</id></alternative><alternative><name><![CDATA[ /test1/processor]]></name><id>b</id></alternative><alternative><name><![CDATA[ /processor]]></name><id>c</id></alternative><alternative><name><![CDATA[ /test1]]></name><id>d</id></alternative><corrects>c</corrects></alternatives><question_name><![CDATA[ Assume that the container is running on port 9999 of localhost, our application is called test1 and that the following servlet is declared with url pattern /processor. What is the output? (1 correct answer)
    
    public class Processor extends HttpServlet {
    public void doGet(HttpServletRequest request,
                      HttpServletResponse response)
                      throws ServletException, IOException {
        response.getWriter().println(request.getServletPath());
    }
    }

        9/test1/processor999
        
        
        

]]></question_name></question><question><alternatives><alternative><name><![CDATA[ http://localhost:]]></name><id>a</id></alternative><alternative><name><![CDATA[ /test1/processor]]></name><id>b</id></alternative><alternative><name><![CDATA[ /processor]]></name><id>c</id></alternative><alternative><name><![CDATA[ /test1]]></name><id>d</id></alternative><corrects>a</corrects></alternatives><question_name><![CDATA[ Assume that the container is running on port 9999 of localhost, our application is called test1 and that the following servlet is declared with url pattern /processor. What is the output? (1 correct answer)
    
    public class Processor extends HttpServlet {
    public void doGet(HttpServletRequest request,
                      HttpServletResponse response)
                      throws ServletException, IOException {
        response.getWriter().println(request.getRequestURL());
    }
    }

        9/test1/processor999
        
        
        

]]></question_name></question><question><alternatives><alternative><name><![CDATA[ http://localhost:]]></name><id>a</id></alternative><alternative><name><![CDATA[ /test1/processor]]></name><id>b</id></alternative><alternative><name><![CDATA[ /processor]]></name><id>c</id></alternative><alternative><name><![CDATA[ /test1]]></name><id>d</id></alternative><corrects>b</corrects></alternatives><question_name><![CDATA[ Assume that the container is running on port 9999 of localhost, our application is called test1 and that the following servlet is declared with url pattern /processor. What is the output? (1 correct answer)
    
    public class Processor extends HttpServlet {
    public void doGet(HttpServletRequest request,
                      HttpServletResponse response)
                      throws ServletException, IOException {
        response.getWriter().println(request.getRequestURI());
    }
    }

        9/test1/processor999
        
        
        

]]></question_name></question><question><alternatives><alternative><name><![CDATA[ GET]]></name><id>a</id></alternative><alternative><name><![CDATA[ POST]]></name><id>b</id></alternative><alternative><name><![CDATA[ A HTTP 405 message informs that GET is not supported.]]></name><id>c</id></alternative><alternative><name><![CDATA[ A HTTP 405 message informs that POST is not supported.]]></name><id>d</id></alternative><corrects>d</corrects></alternatives><question_name><![CDATA[ Consider this form.
    
    <form method="post" action="processor">
       <input type="submit" value="OK"/>
    </form>

    And this servlet.
    
    public class Processor extends HttpServlet {
    public void doGet(HttpServletRequest request,
                      HttpServletResponse response)
                      throws ServletException, IOException {
        response.getWriter().println(request.getMethod());
    }
    }

    What is the output when the form is submitted? (1 correct answer)

        
        
        
        

]]></question_name></question><question><alternatives><alternative><name><![CDATA[ GET]]></name><id>a</id></alternative><alternative><name><![CDATA[ POST]]></name><id>b</id></alternative><alternative><name><![CDATA[ A HTTP 405 message informs that GET is not supported.]]></name><id>c</id></alternative><alternative><name><![CDATA[ A HTTP 405 message informs that POST is not supported.]]></name><id>d</id></alternative><corrects>d</corrects></alternatives><question_name><![CDATA[ Consider this form.
    
    <form method="post" action="processor">
       <input type="submit" value="OK"/>
    </form>

    And this servlet.
    
    public class Processor extends HttpServlet {
    public void doGet(HttpServletRequest request,
                      HttpServletResponse response)
                      throws ServletException, IOException {
        response.getWriter().println(request.getMethod());
    }
    public void doPost(HttpServletResponse response,
                      HttpServletRequest request)
                      throws ServletException, IOException {
        doGet(request, response);
    }
    }

    What is the output when the form is submitted? (1 correct answer)

        
        
        
        

]]></question_name></question><question><alternatives><alternative><name><![CDATA[ form OK]]></name><id>a</id></alternative><alternative><name><![CDATA[ null OK]]></name><id>b</id></alternative><alternative><name><![CDATA[ form null]]></name><id>c</id></alternative><alternative><name><![CDATA[ null null]]></name><id>d</id></alternative><corrects>d</corrects></alternatives><question_name><![CDATA[ Consider this form.
    
    <form name="form" method="post" action="processor">
       <input name="submit" type="submit" value="OK"/>
    </form>

    And this servlet.
    
    public class Processor extends HttpServlet {
    public void doPost(HttpServletRequest request,
                       HttpServletResponse response)
                       throws ServletException, IOException {
        response.getWriter().format("%s %s",
        request.getParameter("form"),
        request.getParameter("name"));
    }
    }

    What is the output when the form is submitted? (1 correct answer)

        
        
        
        

]]></question_name></question><question><alternatives><alternative><name><![CDATA[ form OK]]></name><id>a</id></alternative><alternative><name><![CDATA[ null OK]]></name><id>b</id></alternative><alternative><name><![CDATA[ form null]]></name><id>c</id></alternative><alternative><name><![CDATA[ null null]]></name><id>d</id></alternative><corrects>b</corrects></alternatives><question_name><![CDATA[ Consider this form.
    
    <form name="form" method="post" action="processor">
       <input name="submit" type="submit" value="OK"/>
    </form>

    And this servlet.
    
    public class Processor extends HttpServlet {
    public void doPost(HttpServletRequest request,
                       HttpServletResponse response)
                       throws ServletException, IOException {
        response.getWriter().format("%s %s",
        request.getParameter("form"),
        request.getParameter("submit"));
    }
    }

    What is the output when the form is submitted? (1 correct answer)

        
        
        
        

]]></question_name></question><question><alternatives><alternative><name><![CDATA[ OK OK]]></name><id>a</id></alternative><alternative><name><![CDATA[ null OK]]></name><id>b</id></alternative><alternative><name><![CDATA[ OK null]]></name><id>c</id></alternative><alternative><name><![CDATA[ null null]]></name><id>d</id></alternative><corrects>c</corrects></alternatives><question_name><![CDATA[ Consider this form.
    
    <form name="form" method="post" action="processor">
       <input type="text" name="name" value="OK"/>
       <input name="submit" type="submit" value="OK"/>
    </form>

    And this servlet.
    
    public class Processor extends HttpServlet {
    public void doPost(HttpServletRequest request,
                       HttpServletResponse response)
                       throws ServletException, IOException {
        response.getWriter().format("%s %s",
        request.getParameter("name"),
        request.getParameter("OK"));
    }
    }

    What is the output when the form is submitted? (1 correct answer)

        
        
        
        

]]></question_name></question><question><alternatives><alternative><name><![CDATA[ http://localhost:]]></name><id>a</id></alternative><alternative><name><![CDATA[ http://localhost:]]></name><id>b</id></alternative><alternative><name><![CDATA[ null]]></name><id>c</id></alternative><corrects>b</corrects></alternatives><question_name><![CDATA[ Consider doGet() of a valid servlet with url pattern /source,
    
    request.getRequestDispatcher("target")
           .forward(request, response);

    and doGet() of another valid servlet with url pattern /target.
    
    response.getWriter().println(request.getRequestURL());

    What is the output when invoking http://localhost:9999/exam/source?user=nikos&pass=12345? (1 correct answer)

        9/exam/source999
        9/exam/target999
        

]]></question_name></question><question><alternatives><alternative><name><![CDATA[ user=nikos&pass=12345]]></name><id>a</id></alternative><alternative><name><![CDATA[ null]]></name><id>b</id></alternative><corrects>a</corrects></alternatives><question_name><![CDATA[ Consider doGet() of a valid servlet with url pattern /source,
    
    request.getRequestDispatcher("target")
           .forward(request, response);

    and doGet() of another valid servlet with url pattern /target.
    
    response.getWriter().println(request.getQueryString());

    What is the output when invoking http://localhost:9999/exam/source?user=nikos&pass=12345? (1 correct answer)

        
        

]]></question_name></question><question><alternatives><alternative><name><![CDATA[ user=nikos&pass=12345]]></name><id>a</id></alternative><alternative><name><![CDATA[ null]]></name><id>b</id></alternative><corrects>a</corrects></alternatives><question_name><![CDATA[ Consider doGet() of a valid servlet with url pattern /source,
    
    request.getRequestDispatcher("target")
           .forward(request, response);

    and doGet() of another valid servlet with url pattern /target.
    
    response.getWriter().println(request.getAttribute("javax.servlet.forward.query_string"));

    What is the output when invoking http://localhost:9999/exam/source?user=nikos&pass=12345? (1 correct answer)

        
        

]]></question_name></question><question><alternatives><alternative><name><![CDATA[ /source]]></name><id>a</id></alternative><alternative><name><![CDATA[ /target]]></name><id>b</id></alternative><alternative><name><![CDATA[ null]]></name><id>c</id></alternative><corrects>a</corrects></alternatives><question_name><![CDATA[ Consider doGet() of a valid servlet with url pattern /source,
    
    request.getRequestDispatcher("target")
           .forward(request, response);

    and doGet() of another valid servlet with url pattern /target.
    
    response.getWriter().println(request.getAttribute("javax.servlet.forward.servlet_path"));

    What is the output when invoking http://localhost:9999/exam/source?user=nikos&pass=12345? (1 correct answer)

        
        
        

]]></question_name></question><question><alternatives><alternative><name><![CDATA[ /source]]></name><id>a</id></alternative><alternative><name><![CDATA[ /target]]></name><id>b</id></alternative><alternative><name><![CDATA[ null]]></name><id>c</id></alternative><corrects>b</corrects></alternatives><question_name><![CDATA[ Consider doGet() of a valid servlet with url pattern /source,
    
    request.getRequestDispatcher("target")
           .forward(request, response);

    and doGet() of another valid servlet with url pattern /target.
    
    response.getWriter().println(request.getServletPath());

    What is the output when invoking http://localhost:9999/exam/source?user=nikos&pass=12345? (1 correct answer)

        
        
        

]]></question_name></question><question><alternatives><alternative><name><![CDATA[ 12345]]></name><id>a</id></alternative><alternative><name><![CDATA[ null]]></name><id>b</id></alternative><corrects>a</corrects></alternatives><question_name><![CDATA[ Consider doGet() of a valid servlet with url pattern /source,
    
    request.getRequestDispatcher("target")
           .forward(request, response);

    and doGet() of another valid servlet with url pattern /target.
    
    response.getWriter().println(request.getParameter("pass"));

    What is the output when invoking http://localhost:9999/exam/source?user=nikos&pass=12345? (1 correct answer)

        
        

]]></question_name></question><question><alternatives><alternative><name><![CDATA[ 12345]]></name><id>a</id></alternative><alternative><name><![CDATA[ null]]></name><id>b</id></alternative><corrects>b</corrects></alternatives><question_name><![CDATA[ Consider doGet() of a valid servlet with url pattern /source,
    
    response.sendRedirect("target");

    and doGet() of another valid servlet with url pattern /target.
    
    response.getWriter().println(request.getParameter("pass"));

    What is the output when invoking http://localhost:9999/exam/source?user=nikos&pass=12345? (1 correct answer)

        
        

]]></question_name></question><question><alternatives><alternative><name><![CDATA[ /source]]></name><id>a</id></alternative><alternative><name><![CDATA[ /target]]></name><id>b</id></alternative><alternative><name><![CDATA[ null]]></name><id>c</id></alternative><corrects>b</corrects></alternatives><question_name><![CDATA[ Consider doGet() of a valid servlet with url pattern /source,
    
    response.sendRedirect("target");

    and doGet() of another valid servlet with url pattern /target.
    
    response.getWriter().println(request.getServletPath());

    What is the output when invoking http://localhost:9999/exam/source?user=nikos&pass=12345? (1 correct answer)

        
        
        

]]></question_name></question><question><alternatives><alternative><name><![CDATA[ user=nikos&pass=12345]]></name><id>a</id></alternative><alternative><name><![CDATA[ null]]></name><id>b</id></alternative><corrects>b</corrects></alternatives><question_name><![CDATA[ Consider doGet() of a valid servlet with url pattern /source,
    
    response.sendRedirect("target");

    and doGet() of another valid servlet with url pattern /target.
    
    response.getWriter().println(
        request.getAttribute("javax.servlet.forward.query_string")
    );

    What is the output when invoking http://localhost:9999/exam/source?user=nikos&pass=12345? (1 correct answer)

        
        

]]></question_name></question><question><alternatives><alternative><name><![CDATA[ user=nikos&pass=12345]]></name><id>a</id></alternative><alternative><name><![CDATA[ null]]></name><id>b</id></alternative><corrects>b</corrects></alternatives><question_name><![CDATA[ Consider doGet() of a valid servlet with url pattern /source,
    
    response.sendRedirect("target");

    and doGet() of another valid servlet with url pattern /target.
    
    response.getWriter().println(
        request.getQueryString()
    );

    What is the output when invoking http://localhost:9999/exam/source?user=nikos&pass=12345? (1 correct answer)

        
        

]]></question_name></question><question><alternatives><alternative><name><![CDATA[ The content of index.html]]></name><id>a</id></alternative><alternative><name><![CDATA[ HTTP Status 404]]></name><id>b</id></alternative><corrects>a</corrects></alternatives><question_name><![CDATA[ There is a top-level folder help in the war file with index.htmlinside. What is the output of this code? (1 correct answer)
    
    request.getRequestDispatcher("help/index.html")
           .forward(request, response);

        
        

]]></question_name></question><question><alternatives><alternative><name><![CDATA[ The content of index.html]]></name><id>a</id></alternative><alternative><name><![CDATA[ HTTP Status 404]]></name><id>b</id></alternative><corrects>a</corrects></alternatives><question_name><![CDATA[ There is a top-level folder help in the war file with index.htmlinside. What is the output of this code? (1 correct answer)
    
    request.getRequestDispatcher("/help/index.html")
           .forward(request, response);

        
        

]]></question_name></question><question><alternatives><alternative><name><![CDATA[ The content of fcom.gr]]></name><id>a</id></alternative><alternative><name><![CDATA[ HTTP Status 404]]></name><id>b</id></alternative><corrects>b</corrects></alternatives><question_name><![CDATA[ What is the output of this code? (1 correct answer)
    
    request.getRequestDispatcher("http://fcom.gr")
           .forward(request, response);

        
        

]]></question_name></question><question><alternatives><alternative><name><![CDATA[ The content of index.html]]></name><id>a</id></alternative><alternative><name><![CDATA[ HTTP Status 404]]></name><id>b</id></alternative><corrects>a</corrects></alternatives><question_name><![CDATA[ There is a top-level folder help in the war file with index.htmlinside. What is the output of this code? (1 correct answer)
    
    response.sendRedirect("help/index.html");

        
        

]]></question_name></question><question><alternatives><alternative><name><![CDATA[ The content of index.html]]></name><id>a</id></alternative><alternative><name><![CDATA[ HTTP Status 404]]></name><id>b</id></alternative><corrects>b</corrects></alternatives><question_name><![CDATA[ There is a top-level folder help in the war file with index.htmlinside. What is the output of this code? (1 correct answer)
    
    response.sendRedirect("/help/index.html");

        
        

]]></question_name></question><question><alternatives><alternative><name><![CDATA[ The content of fcom.gr]]></name><id>a</id></alternative><alternative><name><![CDATA[ HTTP Status 404]]></name><id>b</id></alternative><corrects>a</corrects></alternatives><question_name><![CDATA[ What is the output of this code? (1 correct answer)
    
    response.sendRedirect("http://fcom.gr");

        
        

]]></question_name></question><question><alternatives><alternative><name><![CDATA[ The same value is always displayed.]]></name><id>a</id></alternative><alternative><name><![CDATA[ The displayed value increases with every refresh.]]></name><id>b</id></alternative><corrects>b</corrects></alternatives><question_name><![CDATA[ What happens when this servlet is deployed and a user hits repeatedly the refresh button of his browser? (1 correct answer)
    
    public class Test extends HttpServlet {
    private Integer number = 0;
    public void doGet(HttpServletRequest request,
                      HttpServletResponse response)
                      throws ServletException, IOException {
        number = number + 1;
        response.getWriter().println(number);
    }
    }

        
        

]]></question_name></question><question><alternatives><alternative><name><![CDATA[ The same value is always displayed.]]></name><id>a</id></alternative><alternative><name><![CDATA[ The displayed value increases with every refresh.]]></name><id>b</id></alternative><corrects>a</corrects></alternatives><question_name><![CDATA[ What happens when this servlet is deployed and a user hits repeatedly the refresh button of his browser? (1 correct answer)
    
    public class Test extends HttpServlet {
    private Integer number = new Random().nextInt();
    public void doGet(HttpServletRequest request,
                      HttpServletResponse response)
                      throws ServletException, IOException {
        response.getWriter().println(number);
    }
    }

        
        

]]></question_name></question><question><alternatives><alternative><name><![CDATA[ true]]></name><id>a</id></alternative><alternative><name><![CDATA[ false]]></name><id>b</id></alternative><corrects>a</corrects></alternatives><question_name><![CDATA[ The following types are ALL interfaces and are used as listeners in a web application. (1 correct answer)
    → ServletContextListener
    → ServletContextAttributeListener
    → ServletRequestListener
    → ServletRequestAttributeListener
    → HttpSessionListener
    → HttpSessionBindingListener
    → HttpSessionAttributeListener
    → HttpSessionActivationListener

        
        

]]></question_name></question><question><alternatives><alternative><name><![CDATA[ void contextDeleted(ServletContextEvent)]]></name><id>a</id></alternative><alternative><name><![CDATA[ void contextDestroyed(ServletContextEvent)]]></name><id>b</id></alternative><alternative><name><![CDATA[ void servletContextDeleted(ServletContextEvent)]]></name><id>c</id></alternative><alternative><name><![CDATA[ void servletContextDestroyed(ServletContextEvent)]]></name><id>d</id></alternative><corrects>b</corrects></alternatives><question_name><![CDATA[ Consider the interface ServletContextListener. What is the signature of the method that is invoked when the servlet context is about to be shut down? (1 correct answer)
        
        
        
        

]]></question_name></question><question><alternatives><alternative><name><![CDATA[ 0]]></name><id>a</id></alternative><alternative><name><![CDATA[ 1]]></name><id>b</id></alternative><alternative><name><![CDATA[ 2]]></name><id>c</id></alternative><corrects>b</corrects></alternatives><question_name><![CDATA[ There is a properly declared HttpSessionAttributeListener. How many times its attributeRemovedmethod is invoked when the following servlet is accessed once? (1 correct answer)
    
    public class Test extends HttpServlet {
    public void doGet(HttpServletRequest request,
                      HttpServletResponse response)
                      throws ServletException, IOException {
        request.getSession().setAttribute("planet", "earth");
        request.getSession().removeAttribute("planet");
        request.getSession().removeAttribute("planet");
    }
    }

        
        
        

]]></question_name></question><question><alternatives><alternative><name><![CDATA[ 0]]></name><id>a</id></alternative><alternative><name><![CDATA[ 1]]></name><id>b</id></alternative><alternative><name><![CDATA[ 2]]></name><id>c</id></alternative><corrects>b</corrects></alternatives><question_name><![CDATA[ There is a properly declared HttpSessionAttributeListener. How many times its attributeRemovedmethod is invoked when the following servlet is accessed once? (1 correct answer)
    
    public class Test extends HttpServlet {
    public void doGet(HttpServletRequest request,
                      HttpServletResponse response)
                      throws ServletException, IOException {
        request.getSession().setAttribute("planet", "earth");
        request.getSession().invalidate();
        request.getSession().removeAttribute("planet");
        request.getSession().setAttribute("planet", "earth");
    }
    }

        
        
        

]]></question_name></question><question><alternatives><alternative><name><![CDATA[ 0]]></name><id>a</id></alternative><alternative><name><![CDATA[ 1]]></name><id>b</id></alternative><alternative><name><![CDATA[ 2]]></name><id>c</id></alternative><corrects>b</corrects></alternatives><question_name><![CDATA[ There is a properly declared HttpSessionAttributeListener. How many times its attributeReplacedmethod is invoked when the following servlet is accessed once? (1 correct answer)
    
    public class Test extends HttpServlet {
    public void doGet(HttpServletRequest request,
                      HttpServletResponse response)
                      throws ServletException, IOException {
        request.getSession().setAttribute("planet", "earth");
        request.getSession().removeAttribute("earth");
        request.getSession().setAttribute("planet", "earth");
    }
    }

        
        
        

]]></question_name></question><question><alternatives><alternative><name><![CDATA[ 0]]></name><id>a</id></alternative><alternative><name><![CDATA[ 1]]></name><id>b</id></alternative><alternative><name><![CDATA[ 2]]></name><id>c</id></alternative><corrects>a</corrects></alternatives><question_name><![CDATA[ There is a properly declared HttpSessionAttributeListener. How many times its attributeReplacedmethod is invoked when the following servlet is accessed once? (1 correct answer)
    
    public class Test extends HttpServlet {
    public void doGet(HttpServletRequest request,
                      HttpServletResponse response)
                      throws ServletException, IOException {
        request.getSession().setAttribute("planet", "earth");
        request.getSession().removeAttribute("planet");
        request.getSession().setAttribute("planet", "venus");
        request.setAttribute("planet", "earth");
        request.setAttribute("planet", "venus");
    }
    }

        
        
        

]]></question_name></question>